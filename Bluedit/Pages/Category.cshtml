@page "/b/{CategoryName}"
@using bluedit.Pages.Shared.Components
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model bluedit.Pages.CategoryModel
@{
	ViewData["Title"] = $"b/{Model.CategoryName}";
}

<style>
	main {
		display: grid;
	}

	time {
		color: #576F76;
	}

	.category-header {
		display: flex;
		justify-content: space-between;
	}

	h1 {
		font-weight: bold;
	}

	hr {
		margin: 0.1rem 0;
	}

	p {
		margin: 0;
	}

	.thread {
		display: flex;
		border-radius: 5px;
		padding-block: 5px;
		padding-inline: 10px;
		flex-direction: column;
		row-gap: 5px;
	}

		.thread:hover {
			background-color: rgb(237, 248, 250);
		}

	.threads-list {
		display: flex;
		flex-direction: column;
		row-gap: 3px;
	}

	.thread-top-info {
		font-size: 0.875rem;
		column-gap: 0.25rem;
	}

	.thread-top-info,
	.thread-bottom-info {
		display: flex;
	}

	.thread-bottom-info {
		column-gap: 0.25rem;
	}

	.thread-link {
		color: black;
		font-weight: bold;
		text-decoration: none;
	}

	.sorted-by {
		font-weight: bold;
	}

	.thread-answer-count {
		column-gap: 5px;
		padding-inline: 0.75rem;
	}

		.thread-answer-count:hover {
			background-color: rgb(180, 219, 224);
		}
</style>

<main>
	<div class="category-header" grid-area="header">
		<h1>@Model.Category.Title</h1>
		<a href="/b/@Model.CategoryName/new">Créer un fil de discussion</a>
	</div>

	<div class="options">
		<!-- Trié par -->
		<!-- <span class="sorted-by">Nouveautés</span>-->
		<select>
			<option>Nouveautés</option>
			<option>Top</option>
		</select>
	</div>
	<div class="threads-container" grid-area="threads">
		<div class="threads-list">
			@foreach (var Thread in Model.Threads)
			{
				// TODO: a view might be more appropriate
				// TODO: this shouldn't be necessary, actually, since thread has an
				//       answers property with a Count() method.
				//       However, in the current state, it seems to always return 0.
				var rootAnswer = Model._answerRepository.GetRootAnswerOfThread(Thread.Id);
				long answerCount = Model._threadRepository.GetAnswerCountForThread(Thread.Id);
				var user = Model._userRepository.GetById(rootAnswer.UserId)!;
				var isConnected = Model.HttpContext?.Request.Cookies.ContainsKey("username") ?? false;

				<div class="thread">
					<div class="thread-top-info">
						<div>
							<a class="thread-link" href="/u/@user.Name">
								u/@user.Name
							</a>
						</div>
						<div>•</div>
						<div><time>@Model.ThreadIdToRootAnswerMap[Thread.Id].CreationDate.ToLongDateString()</time></div>
					</div>
					<a class="thread-link" href="/b/@Model.CategoryName/t/@Thread.Id">
						@Thread.Title
					</a>
					<p class="thread-root-answer-content">
						@Model.ThreadIdToRootAnswerMap[Thread.Id].Content
					</p>
					<div class="thread-bottom-info">
						@(await Html.RenderComponentAsync<Opinions>(RenderMode.ServerPrerendered, new { isConnected = isConnected, answerId = rootAnswer.Id, answerLikes = rootAnswer.Likes }))
						<div class="answer-chip thread-answer-count">
							<svg rpl="" fill="currentColor" width="20" height="20" icon-name="comment-outline" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
								<path d="M7.725 19.872a.718.718 0 0 1-.607-.328.725.725 0 0 1-.118-.397V16H3.625A2.63 2.63 0 0 1 1 13.375v-9.75A2.629 2.629 0 0 1 3.625 1h12.75A2.63 2.63 0 0 1 19 3.625v9.75A2.63 2.63 0 0 1 16.375 16h-4.161l-4 3.681a.725.725 0 0 1-.489.191ZM3.625 2.25A1.377 1.377 0 0 0 2.25 3.625v9.75a1.377 1.377 0 0 0 1.375 1.375h4a.625.625 0 0 1 .625.625v2.575l3.3-3.035a.628.628 0 0 1 .424-.165h4.4a1.377 1.377 0 0 0 1.375-1.375v-9.75a1.377 1.377 0 0 0-1.374-1.375H3.625Z"></path>
							</svg>
							@answerCount
						</div>
					</div>
				</div>
				@if (Thread != Model.Threads.Last())
				{
					<hr />
				}
			}
		</div>
	</div>
</main>